#!/bin/bash 
set -e 
OPT=$(getopt -n "cf-dns" -o "h,v" -l "help,version,register:,movies,order:,history,cancel:,recoverKey:,userkey:,locations,movieID:,movieName:,theaterID:,city:,country:" -- "$@")

eval set -- "$OPT"
#flags
registerF=0
moviesF=0
orderF=0
historyF=0
cancelF=0
restoreF=0
locationsF=0
movieInfoF=0
#default values
username=""
password=""
userKey=$GLOBAL_USER_KEY
# decoration
format="%3s | %-12s | %-15s | %-50s\n"		#format for output
#server address link
server_address="http://localhost"

# check correct format of credentials i.ex : username:password
function check_creds(){
		tempvar="$1"	
		separators="${tempvar//[^:]}"	# checking amount of ':' in credentials string
		
		if [ "${#separators}" == 1 ]; then
			#if have exactly 1 ':' delimiter, set key to apikey variable
			password="${1#*:}"			
			username="${1%%:*}"	
		elif [ "${#separators}" == 0 ]; then
			echo "client: credentials do not contain an API component"
			exit 1
		fi
		# check not empty credentials
		if [ -z "$password" ] || [ -z "$username" ];then
			echo "client : Username and pussword can not be empty!"	
			exit 1
		fi
}


#version
function versionShow(){
	echo -e "Linux environment programming: \n\nVersion 1.0\n
Authors:\n-----------------------\nLiran Rotenberg\nJohnatan Leon\nIsabelle Meif\nAlexey Silyuk\n"
	exit
}

#Synopsis
function help(){
	echo "Movie tickets ordering system :
	
	./client -h :	this synopsis
	./client -v :	version with authors names
	
	Register to system:
		./client --register username:password
	
	Recover lost userkey:
		./client --recoverKey <USERNAME>:<PASSWORD>
	
	View movies :
		All movies:
			./client --movies
	
		By ID:
			./client --movieID <MOVIEID>
		
		By Name (or part of name,prefix):
			./client --movieName \"MOVIE NAME\"
			
	View locations:
		All without filtering:
			./client --locations
		
		By ID:
			./client --locationID <ID>
		
		By Country:
			./client --locations --country <COUNTRY>, may be used country prefix
		
		By City:
			./client --locations --city <CITY> , may be used city prefix
			
	Ordering :
		UNDER CONSTRUCTION
	
	"
    exit
}

while [ "$1" != "--" ]; do
    case "$1" in
    -h|--help)
            help
            ;;
	-v|--version)
            versionShow
            ;;
    --register)
            register_credentials="$2"
            registerF=1
            shift
            ;;
	--recoverKey)
			restoreF=1
			restore_credentials="$2"
			shift    
	    ;;
	--movies)
            moviesF=1
	    ;;
	--cancel)
            cancel_movie_id="$2"
            cancelF=1
            shift
	    ;;
	--history)
            historyF=1
	    ;;
	--order)
            movie_order_id="$2"
            orderF=1
            shift
	    ;;
	 --userkey)
            userKey="$2"
            shift
	    ;;
	  --locations)
            locationsF=1
	    ;;
	    
	   --movieID)
            movieID="$2"
            movieInfoF=1
            shift
            ;;
        --movieName)
            movieName="$2"
            movieInfoF=1
            shift
            ;;
        --city)
            city="$2"
            cityF=1
            shift
    	      ;;
        --theaterID)
            theaterID="$2"
            theaterIDF=1
            shift
            ;;
        --country)
            country="$2"
            countryF=1
            shift
            ;;
	 *)
			echo Unknown parameter
			exit 1
            ;;
    esac
    shift
	
done


if ! [ -z "$2" ]; then
	echo "cf-dns: unknown extra arguments : "$2""
	exit 1
fi


# Register
if [ "$registerF" == 1 ]; then

	if ! [ -z "$register_credentials" ]; then
		check_creds "$register_credentials"
		
		data=$(curl -s "http://localhost/Register/username="$username"&password="$password"")

		if [ $(jq -r ".status" <<< "$data") == "success" ]; then
			userAuthKey=$(jq -r ".key" <<< "$data")
			echo -e "\n--------------------\nRegistration agent : You registered successfully\n--------------------\n	Username : "$username"\n	Password : "$password"\n	UserKey  : "$userAuthKey"\n	please save your userKey in safe place for ordering tikets\n	run next command to add key to work environment:\n	export GLOBAL_USER_KEY="$userAuthKey""
		else
			message="$(jq -r ".message" <<< "$data")"
			echo -e "\n--------------------\nRegistration agent :  $message\n--------------------\n"
			exit 1
		fi
	else
		echo "Incorrect credentials"
		exit 1
	fi
fi



# Restore user key
if [ "$restoreF" == 1 ];then
	restoreF=0
	if ! [ -z "$restore_credentials" ]; then
		check_creds "$restore_credentials"
		responce=$(curl -s "http://localhost/RecoverKey/username=$username&password=$password")
		echo -e  "\n--------------------\nKey recovery agent :\n--------------------"
		if [  $(jq -r ".status" <<< "$responce") == "success" ]; then			
			userKey=$(jq -r ".key" <<< "$responce")
			echo -e "Your secret key is : "$userKey", save it in safe place !\n"
		else
			echo -e "Key for "$username":"$password" pair not found in system\n"
			exit 1
		fi
	else
		echo "No credentials provided"
		exit 1
		fi
fi

# Order ticket		NOT DONE
if [ "$orderF" == 1 ]; then
	if ! [ -z "$userKey" ];then
		response=$(curl -s "http://localhost/Order/orderID="$movie_order_id"&key="$userKey"" )
		if [ $(jq -r ".status" <<< "$response") == "success"  ];then
			orderID=$(jq -r ".OrderID" <<< "$response")
			echo "Your order number is : "$orderID", enjoy!"
		else
			echo "Error in ordering process, check all parameters"
			exit 1
	fi
	else
		echo "No credentials provided"
		exit 1
	fi
fi

# Cancel ordered ticket		NOT DONE
if [ "$cancelF" == 1 ]; then	
	if ! [ -z "$userKey" ];then
		cancel_result=$(curl -s http://localhost/Cancel/id="$cancel_movie_id"&key="$userKey" | jq ".result")
		if  [ "$cancel_result" == "success" ];then
			echo "Your ticket number \""$cancel_movie_id"\" been cancelled!"
		else
			echo "Error in cancelling process, check all parameters"
			exit 1
		fi
	else
		echo "No credentials provided"		
	fi	
fi


# History view		NOT DONE
if [ "$historyF" == 1 ];then
	if ! [ -z "$userKey" ]; then
		history_list=$(curl "http://lcalhost/History/key="$userKey"")
		
		# !!!! implement iteration to print history list
	else
		echo "No credentials provided"
	fi
fi

# Locations print
if [ "$locations" == 1 ];then
	locations_list=$(curl "http://localhost/Locations/")
	
	# !!!! implement iteration to print locations list
fi




function printMovie(){

	movie="$1"
	format="%3s | %-6s | %-50s\n"		#format for output
	id="$(jq -r ".id" <<< $movie)"
	title="$(jq -r ".title" <<< $movie)"
	year="$(jq -r ".year" <<< $movie)"
	printf "$format" "$id" "$year" "$title"
}

# Get all movies list
if [ "$moviesF" == 1 ]; then 
	movies_list="$(curl -s "http://localhost/Movies/")"
	if [ "$(jq -r ".status" <<< "$movies_list")" == "success" ]; then
	
	length="$(curl -s "http://localhost/Movies/" |jq .movies | jq length)"
	format="%3s | %-6s | %-50s\n"		#format for output
	printf "\nFull Movies list :\n---------------------------\n$format--------------------------------------------------------\n" "ID" "Year" "Movie title"
		for i in `seq 0 "$length"`;
        do   
			movie="$(jq -r ".movies[$i]" <<< $movies_list)"
			if [ "$movie" != "null" ];then
			printMovie "$movie"
			fi
        done  
	else
		echo "No data found"
		exit 1
	fi
fi
# get and prints movie by ID
function printMoviesbyID(){
		responce=$(curl -s http://localhost/Movies/ID="$movieID")
		if [  $(jq -r ".status" <<< "$responce") == "success" ];then
				movie="$(jq ".movies" <<< $responce)"
				if [ "$movie" != null ]; then
					current_movie="$(jq -r ".[0]" <<< $movie)"
					id="$(jq -r ".id" <<< $current_movie)"
					title="$(jq -r ".title" <<< $current_movie)"
					producer="$(jq -r ".producer" <<< $current_movie)"
					year="$(jq -r ".year" <<< $current_movie)"
					description="$(jq -r ".info" <<< $current_movie)"
					link="$(jq -r ".link" <<< $current_movie)"
					#	print movie information
					echo -e "--------------------------\nMovie ID : $id\nTitle : $title\nYear : $year\nProducer : $producer\nLink for more information : $link\nDescription : $description\n--------------------------\n"
				fi
		else
			echo "Movie with ID="$movieID" not found in library"
			exit 1
		fi			
}


function printMoviesList(){
	responce=$(curl -s http://localhost/Movies/title="$movieName")
		if [  $(jq -r ".status" <<< "$responce") == "success" ];then
		movies_list="$(jq ".movies" <<< $responce)"
		arraySize="$(curl -s "http://localhost/Movies/title=$movieName" | jq .movies  | jq length)"
			if [ "$arraySize" == 1 ];then
				movie="$(jq -r ".[0]" <<< $movies_list)"
				movieID="$(jq -r ".id" <<< $movie)"
				printMoviesbyID
			else
			for i in `seq 0 $arraySize`;do
				current_movie="$(jq -r ".[$i]" <<< $movies_list)"
				movieID="$(jq -r ".id" <<< $current_movie)"
				if [ "$movieID" != null ];then
				printMoviesbyID
				fi

			done
			fi
		else
			echo "Movie with Name \""$movieName"\" not found in library"
			exit 1
		fi
}

# Movie info view
if  [ "$movieInfoF" == 1 ];then
	echo -e "Movies according to your request :\n"
	
	# view movie by ID
	if ! [ -z "$movieID" ]; then
		printMoviesbyID	
	fi
	
	 # view movie by name
	if ! [ -z "$movieName" ]; then
		printMoviesList
	fi
	
	
	exit 0
	
fi  

# prints one received location
function printOneLocation(){
	location="$1"
		id="$(jq -r ".id" <<< $location)"
		if [ "$id" != "null" ];then
			country="$(jq -r ".country" <<< $location)"
			city="$(jq -r ".city" <<< $location)"	
			address="$(jq -r ".address" <<< $location)"	
			printf "$format" "$id" "$country" "$city" "$address"
		fi
}

function printAllLocations(){
	locations=$(curl -s "http://localhost/Locations/" )
	length=$(curl -s "http://localhost/Locations/" | jq .locations | jq length) 
	for i in `seq 0 $length`;
        do  
        current_movie="$(jq -r ".locations[$i]" <<< $locations)" 
        printOneLocation "$current_movie"

    done
    exit
}


function printLocationByID(){
	if [ -n "$theaterID" ];then
		location=$(curl -s "http://localhost/Locations/ID="$theaterID"" | jq .locations[0])
		printOneLocation "$location"
	else
		echo "No movie ID received"
		exit 1
	fi
	exit
}

function printLocationByCity(){
	if [ -n "$city" ];then
		locations=$(curl -s "http://localhost/Locations/city="$city"")
		length=$(curl -s "http://localhost/Locations/city="$city"" | jq .locations | jq length) 
		for i in `seq 0 $length`;do  
			current_movie="$(jq -r ".locations[$i]" <<< $locations)" 
			printOneLocation "$current_movie"
		done
	else
		echo "No city value received"
		exit 1
	fi
	exit
}

function printLocationByCountry(){
	if [ -n "$country" ];then
		locations=$(curl -s "http://localhost/Locations/country="$country"")
		length=$(curl -s "http://localhost/Locations/country="$country"" |jq .locations | jq length) 
		for i in `seq 0 $length`;do  
			current_movie="$(jq -r ".locations[$i]" <<< $locations)" 
			printOneLocation "$current_movie"
		done
	else
		echo "No city value received"
		exit 1
	fi
	exit
}
# View locations
if [ "$locationsF" == 1 ];then
	printf "$format" "ID" "Country" "City" "Address"
	echo  "--------------------------------------------"
	if [ "$theaterIDF" == 1 ];then
		printLocationByID
	elif [ "$cityF" == 1 ];then
		printLocationByCity
	elif [ "$countryF" == 1 ];then
		printLocationByCountry
	else
		printAllLocations
	fi
	exit
fi

